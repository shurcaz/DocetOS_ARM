


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             OS_func, CODE, READONLY
    2 00000000         
    3 00000000         ; Export function locations
    4 00000000                 EXPORT           SVC_Handler
    5 00000000                 EXPORT           PendSV_Handler
    6 00000000                 EXPORT           _task_switch
    7 00000000                 EXPORT           _task_init_switch
    8 00000000         
    9 00000000         ; Import global variables
   10 00000000                 IMPORT           _currentTCB
   11 00000000                 IMPORT           _OS_schedule
   12 00000000         
   13 00000000         ; Import SVC routines
   14 00000000                 IMPORT           _OS_enable_systick_delegate
   15 00000000                 IMPORT           _OS_taskExit_delegate
   16 00000000                 IMPORT           _OS_yield_delegate
   17 00000000                 IMPORT           _OS_schedule_delegate
   18 00000000         
   19 00000000         SVC_Handler
   20 00000000         ; r7 contains requested handler, on entry
   21 00000000 F01E 0F04       TST              lr, #4
   22 00000004 BF0C            ITE              EQ
   23 00000006 F3EF 8008       MRSEQ            r0, MSP
   24 0000000A F3EF 8009       MRSNE            r0, PSP
   25 0000000E         ; r0 now contains the SP that was in use
   26 0000000E         ; Check if requested handler in the table
   27 0000000E 2F04            CMP              r7, #((SVC_tableEnd - SVC_table
Start)/4)
   28 00000010         ; If not, return
   29 00000010 BFA8 4770       BXGE             lr
   30 00000014         ; Branch to the right handler
   31 00000014         ; Remember, the SP is in r0
   32 00000014 4A1A            LDR              r2, =SVC_tableStart
   33 00000016 F852 F027       LDR              pc, [r2, r7, lsl #2]
   34 0000001A         
   35 0000001A 00 00           ALIGN
   36 0000001C         SVC_tableStart
   37 0000001C 00000000        DCD              _OS_enable_systick_delegate
   38 00000020 00000000        DCD              _OS_taskExit_delegate
   39 00000024 00000000        DCD              _OS_yield_delegate
   40 00000028 00000000        DCD              _OS_schedule_delegate
   41 0000002C         SVC_tableEnd
   42 0000002C         
   43 0000002C                 ALIGN
   44 0000002C         PendSV_Handler
   45 0000002C B510            STMFD            sp!, {r4, lr} ; r4 included for
                                                             stack alignment
   46 0000002E F7FF FFFE       BL               _OS_schedule
   47 00000032 E8BD 4010       LDMFD            sp!, {r4, lr}
   48 00000036         _task_switch
   49 00000036         ; r0 contains nextTCB (OS_TCB *)
   50 00000036         ; Load r2 = &_currentTCB (OS_TCB **), r1 = _currentTCB (
                       OS_TCB *, == OS_StackFrame **)
   51 00000036 4A13            LDR              r2, =_currentTCB
   52 00000038 6811            LDR              r1, [r2]
   53 0000003A         ; Compare _currentTCB to nextTCB: if equal, go home
   54 0000003A 4281            CMP              r1, r0
   55 0000003C BF08 4770       BXEQ             lr
   56 00000040         ; If not, stack remaining process registers (pc, PSR, lr



ARM Macro Assembler    Page 2 


                       , r0-r3, r12 already stacked)
   57 00000040 F3EF 8309       MRS              r3, PSP
   58 00000044 E923 0FF0       STMFD            r3!, {r4-r11}
   59 00000048         ; Store stack pointer
   60 00000048 600B            STR              r3, [r1]
   61 0000004A         ; Load new stack pointer
   62 0000004A 6803            LDR              r3, [r0]
   63 0000004C         ; Unstack process registers
   64 0000004C E8B3 0FF0       LDMFD            r3!, {r4-r11}
   65 00000050 F383 8809       MSR              PSP, r3
   66 00000054         ; Update _currentTCB
   67 00000054 6010            STR              r0, [r2]
   68 00000056         ; Clear exclusive access flag
   69 00000056 F3BF 8F2F       CLREX
   70 0000005A 4770            BX               lr
   71 0000005C         
   72 0000005C                 ALIGN
   73 0000005C         _task_init_switch
   74 0000005C         ; Assume thread mode on entry
   75 0000005C         ; Initial task is the idle task
   76 0000005C         ; On entry r0 = OS_idleTCB_p (OS_TCB *)
   77 0000005C         ; Load r1 = *(r0) (OS_StackFrame *)
   78 0000005C 6801            LDR              r1, [r0]
   79 0000005E         ; Update PSP
   80 0000005E F381 8809       MSR              PSP, r1
   81 00000062         ; Update _currentTCB
   82 00000062 4A08            LDR              r2, =_currentTCB
   83 00000064 6010            STR              r0, [r2]
   84 00000066         ; Switch to using PSP instead of MSP for thread mode (bi
                       t 1 = 1)
   85 00000066         ; Also lose privileges in thread mode (bit 0 = 1) and di
                       sable FPU (bit 2 = 0)
   86 00000066 F04F 0203       MOV              r2, #3
   87 0000006A F382 8814       MSR              CONTROL, r2
   88 0000006E         ; Instruction barrier (stack pointer switch)
   89 0000006E F3BF 8F6F       ISB
   90 00000072         ; Check to see if the scheduler is preemptive before
   91 00000072         ; This SVC call should be handled by _svc_OS_enable_syst
                       ick()
   92 00000072 F04F 0700       MOV              r7, #0
   93 00000076 DF00            SVC              0x00
   94 00000078         ; Continue to the idle task
   95 00000078         
   96 00000078                 ALIGN
   97 00000078         ; This SVC call should be handled by _svc_OS_schedule()
   98 00000078         ; It causes a switch to a runnable task, if possible
   99 00000078 F04F 0703       MOV              r7, #3
  100 0000007C DF00            SVC              0x00
  101 0000007E         _idle_task
  102 0000007E         ; The following line is commented out because it doesn't
                        play nicely with the debugger.
  103 0000007E         ; For deployment, uncomment this line and the CPU will s
                       leep when idling, waking only to
  104 0000007E         ; handle interrupts.
  105 0000007E         ;   WFI
  106 0000007E E7FE            B                _idle_task
  107 00000080         
  108 00000080                 ALIGN
  109 00000080                 END



ARM Macro Assembler    Page 3 


              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --fpu=SoftVFP
 --depend=.\objects\os_asm.d -o.\objects\os_asm.o -I.\RTE\_STM32F407_Flash -IC:
\KEIL_V5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\KEIL_V5\ARM\PACK\Keil
\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__
UVISION_VERSION SETA 535" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx S
ETA 1" --predefine="_RTE_ SETA 1" --list=.\listings\os_asm.lst src\OS\os_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OS_func 00000000

Symbol: OS_func
   Definitions
      At line 1 in file src\OS\os_asm.s
   Uses
      None
Comment: OS_func unused
PendSV_Handler 0000002C

Symbol: PendSV_Handler
   Definitions
      At line 44 in file src\OS\os_asm.s
   Uses
      At line 5 in file src\OS\os_asm.s
Comment: PendSV_Handler used once
SVC_Handler 00000000

Symbol: SVC_Handler
   Definitions
      At line 19 in file src\OS\os_asm.s
   Uses
      At line 4 in file src\OS\os_asm.s
Comment: SVC_Handler used once
SVC_tableEnd 0000002C

Symbol: SVC_tableEnd
   Definitions
      At line 41 in file src\OS\os_asm.s
   Uses
      At line 27 in file src\OS\os_asm.s
Comment: SVC_tableEnd used once
SVC_tableStart 0000001C

Symbol: SVC_tableStart
   Definitions
      At line 36 in file src\OS\os_asm.s
   Uses
      At line 27 in file src\OS\os_asm.s
      At line 32 in file src\OS\os_asm.s

_idle_task 0000007E

Symbol: _idle_task
   Definitions
      At line 101 in file src\OS\os_asm.s
   Uses
      At line 106 in file src\OS\os_asm.s
Comment: _idle_task used once
_task_init_switch 0000005C

Symbol: _task_init_switch
   Definitions
      At line 73 in file src\OS\os_asm.s
   Uses
      At line 7 in file src\OS\os_asm.s
Comment: _task_init_switch used once
_task_switch 00000036




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: _task_switch
   Definitions
      At line 48 in file src\OS\os_asm.s
   Uses
      At line 6 in file src\OS\os_asm.s
Comment: _task_switch used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

_OS_enable_systick_delegate 00000000

Symbol: _OS_enable_systick_delegate
   Definitions
      At line 14 in file src\OS\os_asm.s
   Uses
      At line 37 in file src\OS\os_asm.s
Comment: _OS_enable_systick_delegate used once
_OS_schedule 00000000

Symbol: _OS_schedule
   Definitions
      At line 11 in file src\OS\os_asm.s
   Uses
      At line 46 in file src\OS\os_asm.s
Comment: _OS_schedule used once
_OS_schedule_delegate 00000000

Symbol: _OS_schedule_delegate
   Definitions
      At line 17 in file src\OS\os_asm.s
   Uses
      At line 40 in file src\OS\os_asm.s
Comment: _OS_schedule_delegate used once
_OS_taskExit_delegate 00000000

Symbol: _OS_taskExit_delegate
   Definitions
      At line 15 in file src\OS\os_asm.s
   Uses
      At line 38 in file src\OS\os_asm.s
Comment: _OS_taskExit_delegate used once
_OS_yield_delegate 00000000

Symbol: _OS_yield_delegate
   Definitions
      At line 16 in file src\OS\os_asm.s
   Uses
      At line 39 in file src\OS\os_asm.s
Comment: _OS_yield_delegate used once
_currentTCB 00000000

Symbol: _currentTCB
   Definitions
      At line 10 in file src\OS\os_asm.s
   Uses
      At line 51 in file src\OS\os_asm.s
      At line 82 in file src\OS\os_asm.s

6 symbols
349 symbols in table
